version: 1
c-api-title: RVM-CSI API
c-documentation-title: RVM-CSI API
boilerplate: >
  Copyright (c) RISC-V International 2022.
  Creative Commons License.
  Auto-generated file: DO NOT EDIT
adoc-optimization: pdf
top-heading-level: 2
modules:
  - name: General-Purpose Definitions for use in CSI code
    description: >
      This file is included prior to all other headers and contains general-purpose definitions which
      may be used by subsequent headers.
    c-specific: true
    c-filename: csi_defs.h
    c-type-declarations:
    - name: csi_status_t
      description: Return type for functions indicating status 
      type: enum
      enum-members:
      - name: CSI_SUCCESS
        value: 0
      - name: CSI_NOT_IMPLEMENTED
        value: -1
      - name: CSI_ERROR
        value: -2
      - name: CSI_NOT_INITIALIZED
        value: -3
      - name: CSI_OUT_OF_MEM
        value: -4
    - name: csi_trap_source_t
      description: >
        Enumerates all sources in the system that can give rise to a trap event.  This enumeration should
        be treated as an integer which can have additional values beyond those enumerated here.  A standard
        set of interrupt and exception sources are enumerated here, which exclude external sources.  All
        external interrupt sources should be enumerated by the BSP within csi_bsp_interrupts.h; and their
        ennumerated values should follow on from CSI_NUM_STANDARD_TRAP_SOURCES.  csi_bsp_interrupts.h must
        also define CSI_TOTAL_BSP_TRAP_SOURCES to indicate the total number of sources defined.  User
        applications may then use values above this to enumerate user-defined software signals.  Note that
        the actual enumerated values have no meaning beyond serving to uniquely identify the source of a
        trap event.
      type: enum
      enum-members:
      - name: CSI_ENUM_NMI
        value: 0
      - name: CSI_ENUM_MACHINE_SW_INTERRUPT
      - name: CSI_ENUM_MACHINE_TIMER_INTERRUPT
      - name: CSI_ENUM_INSTRUCTION_ADDR_MISALIGNED_EXCEPTION
      - name: CSI_ENUM_INSTRUCTION_ACCESS_FAULT_EXCEPTION
      - name: CSI_ENUM_ILLEGAL_INSTRUCTION_EXCEPTION
      - name: CSI_ENUM_BREAKPOINT_EXCEPTION
      - name: CSI_ENUM_LOAD_ADDR_MISALIGNED_EXCEPTION
      - name: CSI_ENUM_LOAD_ACCESS_FAULT_EXCEPTION
      - name: CSI_ENUM_STORE_ADDR_MISALIGNED_EXCEPTION
      - name: CSI_ENUM_STORE_ACCESS_FAULT_EXCEPTION
      - name: CSI_ENUM_ECALL_FROM_UMODE
      - name: CSI_ENUM_ECALL_FROM_MMODE
      - name: CSI_ENUM_INST_PAGE_FAULT
      - name: CSI_ENUM_LOAD_PAGE_FAULT
      - name: CSI_ENUM_STORE_PAGE_FAULT
      - name: CSI_NUM_STANDARD_TRAP_SOURCES
        description: Must come last in this list
  - name: Trap Handling / Interrupt Support
    description: >
      This module provides functionality for routing interrupts and registering handlers for traps.
      The BSP provides a base trap handler.  Running the initialisation function csi_interrupts_init will
      put the address of this handler in the mtvec register.  This base trap handler provides default
      exception handling, and calls any handlers registered by the user.  It also provides functionality
      required by the RVM-CSI timer module.  Systems using RVM-CSI may provide their own trap handling
      support, in which case csi_interrupts_init should not be called, and all functions in this module,
      and in the timer module, will be inoperative.
    notes:
      - There will be at most one instance of the trap handling and interrupt subsystem per hart.
    c-specific: false
    c-filename: csi_interrupts.h
    c-include-files:
    - filename: csi_defs.h
      system-header: false
    c-type-declarations:
    - name: csi_isr_t
      description: Function prototype for the users trap handler (M-mode or U-mode)
      type: function
      func-typedef-retval: void
      func-typedef-params:
      - name: source
        description: >
          Enumerated interrupt source for which the handler was registered.
        type: int
      - name: isr_ctx
        description: User's context pointer as supplied when the handler was registered.
        type: void *
      - name: mtval
        description: Contents of the mtval register associated with this trap.
        type: unsigned
    functions:
    - name: csi_interrupts_init
      description: >
        Initialize interrupt and timer sub-system for this hart.  Must be called before calling any other functions
        in this module.  This function must run in machine mode.
      c-params:
      - name: mctx
        description: >
          Pointer to an area of memory to be used as M-mode context space for the interrupt subsystem.  The BSP will
          define a macro CSI_INTERRUPT_MCTX_MIN_SIZE_BYTES which defines the minimum required size of this context space in
          bytes.  Calling this function initializes the context space.
        type: void *
      - name: mctx_size
        description: >
          Size of memory allocated at the mctx pointer in bytes.  Allocating more than CSI_INTERRUPT_MCTX_MIN_SIZE_BYTES may
          permit additional M-mode handlers to be registered.
        type: unsigned
      - name: uctx
        description: >
          Pointer to an area of memory to be used as U-mode context space for the interrupt subsystem.  The BSP will
          define a macro CSI_INTERRUPT_UCTX_MIN_SIZE_BYTES which defines the minimum required size of this context space in
          bytes.  Calling this function initializes the context space.
        type: void *
      - name: uctx_size
        description: >
          Size of memory allocated at the uctx pointer in bytes.  Allocating more than CSI_INTERRUPT_UCTX_MIN_SIZE_BYTES may
          permit additional U-mode handlers to be registered.
        type: unsigned
      c-return-value:
        description: Status of initialisation operation
        type: csi_status_t
    - name: csi_interrupts_uninit
      description: >
        Un-initialize the interrupt and timer sub-system.  After calling this function, the memory allocated
        for the contexts may be freed, and no other functions in this module may be called.  This function
        must run in machine mode.
      c-params:
      - name: mctx
        description: >
          M-mode context pointer previously initialised by csi_interrupts_init.
        type: void *
      c-return-value:
        description: Status of uninitialisation operation
        type: csi_status_t
    - name: get_interrupts_u_ctx
      description: >
        This function is run from U-mode to obtain the U-mode context pointer previously passed into csi_interrupts_init
        for the current hart.
      c-return-value:
        description: context pointer, or null pointer if inapplicable.
        type: void *
    - name: csi_register_m_isr
      description: >
        Registers a user-supplied function (isr) that will be called in M-mode by the base trap handler on receipt of a
        trap arising from from the source signal.  isr_ctx is a parameter that will be passed into the user's ISR
        along with the signal number and mtval contents.  This function transparently deals with routing the desired signal
        to the hart and enabling the interrupt.  This function must run in machine mode.  Running this function with a NULL
        pointer for the isr parameter will un-register a previously registered handler.
      c-params:
      - name: mctx
        description: >
          M-mode context pointer previously initialised by csi_interrupts_init.
        type: void *
      - name: isr
        description: >
          Pointer to the user's handler function; or NULL pointer to un-register a handler.
        type: csi_isr_t *
      - name: isr_ctx
        description: >
          Pointer to the user's context.  This will be passed into the handler function when called.
        type: void *
      - name: source
        description: >
          Enumerated interrupt / exception source.  This must be one of the enumerations from csi_trap_source_t, or
          a value from the BSP (extending the enumerations in csi_trap_source_t) enumerating a platform-specific
          external interrupt source.
        type: int
      c-return-value:
        description: >
          Status of ISR registration operation.  CSI_ERROR will be returned if the source parameter is
          invalid.  CSI_NOT_INITIALIZED will be returned if csi_interrupts_init has not been called prior to calling this
          function, or if csi_interrupts_uninit was called prior to calling this function.  CSI_OUT_OF_MEM will be
          returned if the number of handlers registered exceeds that supported by the context size.
        type: csi_status_t
    - name: csi_register_u_isr
      description: >
        Registers a user-supplied function (isr) that will be called in U-mode by the base trap handler on receipt of a
        trap arising from from the source signal.  isr_ctx is a parameter that will be passed into the user's ISR
        along with the signal number and mtval contents.  This function transparently deals with routing the desired signal
        to the hart and enabling the interrupt.  This function must run in user mode.  Running this function with a NULL
        pointer for the isr parameter will un-register a previously registered handler.
      c-params:
      - name: uctx
        description: >
          U-mode context pointer previously initialised by csi_interrupts_init.
        type: void *
      - name: isr
        description: >
          Pointer to the user's handler function; or NULL pointer to un-register a handler
        type: csi_isr_t *
      - name: isr_ctx
        description: >
          Pointer to the user's context.  This will be passed into the handler function when called.
        type: void *
      - name: source
        description: >
          Enumerated interrupt / exception source.  This must be one of the enumerations from csi_trap_source_t, or
          a value from the BSP (extending the enumerations in csi_trap_source_t) enumerating a platform-specific
          external interrupt source.
        type: int
      c-return-value:
        description: >
          Status of ISR registration operation.  CSI_ERROR will be returned if the source parameter is
          invalid, or if the requested source has not been enabled for u-mode handling by first running 
          csi_set_umode_trap_permissions .  CSI_NOT_INITIALIZED will be returned if csi_interrupts_init has not been
          called prior to calling this function, or if csi_interrupts_uninit was called prior to calling this
          function. CSI_OUT_OF_MEM will be returned if the number of handlers registered exceeds that supported by
          the context size.
        type: csi_status_t
    - name: csi_disable_m_trap_source
      description: >
        Disable a trap source.  This function must be run in machine mode.  Note that this only gates an interrupting
        signal within the interrupt control logic.  Device drivers may offer separate controls for turning their
        interrupts on and off at source.
      c-params:
      - name: mctx
        description: >
          M-mode context pointer previously initialised by csi_interrupts_init.
        type: void *
      - name: source
        description: >
          Enumerated interrupt / exception source.  This must be one of the enumerations from csi_trap_source_t, or
          a value from the BSP (extending the enumerations in csi_trap_source_t) enumerating a platform-specific
          external interrupt source.
        type: int
      c-return-value:
        description: >
          Status of disable operation.  CSI_ERROR will be returned if the source parameter is
          invalid.
        type: csi_status_t
    - name: csi_enable_m_trap_source
      description: >
        Enable a trap source.  This function must be run in machine mode.  Note that this only gates an interrupting
        signal within the interrupt control logic.  Device drivers may offer separate controls for turning their
        interrupts on and off at source.
      c-params:
      - name: mctx
        description: >
          M-mode context pointer previously initialised by csi_interrupts_init.
        type: void *
      - name: source
        description: >
          Enumerated interrupt / exception source.  This must be one of the enumerations from csi_trap_source_t, or
          a value from the BSP (extending the enumerations in csi_trap_source_t) enumerating a platform-specific
          external interrupt source.
        type: int
      c-return-value:
        description: >
          Status of enable operation.  CSI_ERROR will be returned if the source parameter is
          invalid.
        type: csi_status_t
    - name: csi_disable_u_trap_source
      description: >
        Disable handling of a trap arising from a particular source.  This function must be run in user mode.
        It will only have an effect if a user-mode handler has previously been registered for the selected source.
        Note this only disables the running of the handler.  Device drivers may offer separate controls for turning their
        interrupts on and off at source.
      c-params:
      - name: uctx
        description: >
          U-mode context pointer previously initialised by csi_interrupts_init.
        type: void *
      - name: source
        description: >
          Enumerated interrupt / exception source.  This must be one of the enumerations from csi_trap_source_t, or
          a value from the BSP (extending the enumerations in csi_trap_source_t) enumerating a platform-specific
          external interrupt source.
        type: int
      c-return-value:
        description: >
          Status of disable operation.  CSI_ERROR will be returned if the source parameter is
          invalid.
        type: csi_status_t
    - name: csi_enable_u_trap_source
      description: >
        Enable handling of a trap arising from a particular source.  This function must be run in user mode.
        It will only have an effect if a user-mode handler has previously been registered for the selected source.
        Note this only enables the running of the handler.  Device drivers may offer separate controls for turning their
        interrupts on and off at source.
      c-params:
      - name: uctx
        description: >
          U-mode context pointer previously initialised by csi_interrupts_init.
        type: void *
      - name: source
        description: >
          Enumerated interrupt / exception source.  This must be one of the enumerations from csi_trap_source_t, or
          a value from the BSP (extending the enumerations in csi_trap_source_t) enumerating a platform-specific
          external interrupt source.
        type: int
      c-return-value:
        description: >
          Status of enable operation.  CSI_ERROR will be returned if the source parameter is
          invalid.
        type: csi_status_t
    - name: csi_set_interrupt_enables
      description: Enable or disable 3 classes of interrupts for this hart.  Must be run in machine mode.
      c-params:
      - name: int_enables
        description: >
          Set bit 3 to enable software interrupts.  Set bit 7 to enable timer interrupts.  Set bit 11 to enable
          external interrupts.  Setting these bits to zero will disable each interrupt source respectively.  All
          other bits should be left at zero.
        type: unsigned
      c-return-value:
        description: >
          Integer in the same format as int_enables, reflecting the previous value of int_enables prior to the
          change.  This may be stored and passed back into another call to csi_set_interrupt_enables in order
          to restore the previous interrupt enables state.
        type: unsigned
    - name: csi_set_umode_trap_permissions
      description: >
        Informs the interrupt subsystem whether a given signal is allowed to be handled in user mode.  This function
        must be run in machine mode.  Any signals for which this function is not run will not be permitted to be
        handled in U-mode.
      c-params:
      - name: mctx
        description: >
          M-mode context pointer previously initialised by csi_interrupts_init.
        type: void *
      - name: source
        description: >
          Enumerated interrupt / exception source.  This must be one of the enumerations from csi_trap_source_t, or
          a value from the BSP (extending the enumerations in csi_trap_source_t) enumerating a platform-specific
          external interrupt source.
        type: int
      - name: permitted
        description: >
          True if user mode is permitted to register a handler for this trap source.  False if not permitted.
        type: bool
      c-return-value:
        description: >
          Status of permissions setting operation.  CSI_ERROR will be returned if the source parameter is
          invalid.
        type: csi_status_t        
    - name: csi_define_sw_signal
      description: >
        Allocates a signal number for software use.  The signal number must be outside the range currently
        reserved by the BSP, otherwise an error is raised.  When raised, the signal will be routed to the
        specified hart ID.  Must be run in machine mode.
      c-params:
      - name: mctx
        description: >
          M-mode context pointer previously initialised by csi_interrupts_init.
        type: void *
      - name: signal
        description: >
          Source enumeration for this signal.  A unique number >= CSI_TOTAL_BSP_TRAP_SOURCES must be chosen.
        type: int
      - name: hartid
        description: >
          ID of the hart to which this signal will be routed.
        type: int
      c-return-value:
        description: >
          Status of operation.  CSI_ERROR will be returned if the source parameter is invalid.
        type: csi_status_t        
    - name: csi_raise_signal
      description: >
        Raises a software signal, previously defined using csi_define_sw_signal.  Must be run in machine mode.
      c-params:
      - name: mctx
        description: >
          M-mode context pointer previously initialised by csi_interrupts_init.
        type: void *
      - name: signal
        description: >
          Source enumeration for this signal.
        type: int
      c-return-value:
        description: >
          Status of operation.  CSI_ERROR will be returned if the specified signal is not software-raisable.
        type: csi_status_t        
    - name: csi_set_irq_priority
      description: >
        Set priority for an external interrupt source.  Priorities range from 0 to CSI_MAX_INTERRUPT_PRIORITY,
        where 0 indicates "never interrupt", and 1 is the lowest subsequent priority level.
        This function must be run in machine mode.
      c-params:
      - name: mctx
        description: >
          M-mode context pointer previously initialised by csi_interrupts_init.
        type: void *
      - name: signal
        description: >
          Source enumeration for this signal.
        type: int
      - name: priority
        description: priority level.
        type: int
      c-return-value:
        description: >
          Status of operation.  CSI_ERROR will be returned if the request is invalid.
        type: csi_status_t
    - name: csi_get_irq_priority
      description: >
        Get priority of an external interrupt source.  Must be run in machine mode.
      c-params:
      - name: mctx
        description: >
          M-mode context pointer previously initialised by csi_interrupts_init.
        type: void *
      - name: signal
        description: >
          Source enumeration for this signal.
        type: int
      c-return-value:
        description: priority level (resulting from calls to csi_set_irq_priority).  -1 will be returned if
          the request is invalid.
        type: int
    - name: csi_set_irq_priority_thresh
      description: >
        Set a priority threshold below which external interrupts will be masked.  Must be run in machine mode.
      c-params:
      - name: mctx
        description: >
          M-mode context pointer previously initialised by csi_interrupts_init.
        type: void *
      - name: threshold
        description: Priority threshold for external interrupts.
        type: int
      c-return-value:
        description: >
          Status of operation.  CSI_ERROR will be returned if the request is invalid.
        type: csi_status_t
    - name: csi_get_irq_priority_thresh 
      description: Get the current priority threshold for external interrupts
      c-params:
      - name: mctx
        description: >
          M-mode context pointer previously initialised by csi_interrupts_init.
        type: void *
      c-return-value:
        description: Priority threshold, or -1 if priority thresholds unsupported, or on error.
        type: int
